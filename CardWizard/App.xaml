<Application x:Class="CardWizard.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CardWizard"
             xmlns:cview="clr-namespace:CardWizard.View"
             xmlns:System="clr-namespace:System;assembly=System.Runtime"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <SolidColorBrush x:Key="MenuBackground" Color="#FF35609C"/>
        <SolidColorBrush x:Key="ButtonForeground" Color="White"/>
        <SolidColorBrush x:Key="PlaceholderForeground" Color="Gray"/>
        <SolidColorBrush x:Key="TextForeground" Color="Black"/>
        <SolidColorBrush x:Key="ButtonBackground" Color="#FF69A6E4"/>
        <SolidColorBrush x:Key="ValidForeground" Color="#FF00FF51"/>
        <SolidColorBrush x:Key="InvalidForeground" Color="#FFFF3030"/>
        <GridLength x:Key="TitleRowHeight">36</GridLength>
        <SolidColorBrush x:Key="CharacteristicBorderBrush" Color="#FF3C6185"/>
        <SolidColorBrush x:Key="SkillBorderBrush" Color="slategray"/>
        <System:String x:Key="AgeBonusMark">⚠</System:String>
        <!--默认字体-->
        <FontFamily x:Key="WindowFontFamily">Hack</FontFamily>
        <!--默认的 Margin-->
        <Thickness x:Key="DefaultMargin">2,2,2,2</Thickness>
        <!--提示信息窗口的显示样式-->
        <Style x:Key="XToolTip" TargetType="ToolTip">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Background" Value="WhiteSmoke"/>
            <Setter Property="Opacity" Value="0.75"/>
        </Style>
        <!-- 定义Label 的样式-->
        <Style x:Key="XLabel" TargetType="Label">
            <Setter Property="Margin" Value="{DynamicResource DefaultMargin}"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="Foreground" Value="Gray"/>
            <Setter Property="Cursor" Value="Arrow"/>
        </Style>
        <!--标题-->
        <Style x:Key="XTitle" TargetType="Label">
            <Setter Property="Margin" Value="{DynamicResource DefaultMargin}"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="Cursor" Value="Arrow"/>
            <Setter Property="Background" Value="#FF426E93"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontSize" Value="22"/>
        </Style>
        <!--下拉弹窗-->
        <Style x:Key="ComboGenceral" TargetType="ComboBox">
            <Setter Property="Background" Value="WhiteSmoke"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="{DynamicResource MenuBackground}"/>
        </Style>
        <!-- 定义 Button 的样式 -->
        <Style x:Key="XButtonStyle" TargetType="Button">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="#43a9c7"/>
            <Setter Property="Cursor" Value="Hand"></Setter>
            <Setter Property="ToolTip">
                <Setter.Value>
                    <ToolTip Style="{DynamicResource XToolTip}"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#2f96b4"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="border" Property="Background" Value="#2a89a4"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="Gray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--定义 TextBlock 的样式-->
        <Style x:Key="GeneralTextBlock" TargetType="TextBlock">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
            <Setter Property="TextAlignment" Value="Center"/>
        </Style>
        <!--带有标签的 TextBox-->
        <Style x:Key="LabeledBox" TargetType="TextBox">
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="AcceptsReturn" Value="True"/>
            <Setter Property="MaxLines" Value="5"/>
            <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Margin" Value="4,6,4,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Grid Margin="{DynamicResource DefaultMargin}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="24"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Label Content="{TemplateBinding DataContext}"
                                   HorizontalAlignment="Left" VerticalAlignment="Top" 
                                   FontWeight="Bold" FontSize="14" Padding="0,0,0,0"/>
                            <TextBox Grid.Row="1" Padding="{TemplateBinding Padding}"
                                     Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                     MaxLines="{TemplateBinding MaxLines}" FontSize="{TemplateBinding FontSize}"
                                     Text="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}}" AcceptsReturn="{TemplateBinding AcceptsReturn}"
                                     VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" TextWrapping="Wrap"/>
                            <Button x:Name="button_confirm" Width="16" Height="16" Margin="{DynamicResource DefaultMargin}" Style="{DynamicResource XButtonStyle}" Tag="Card.Button.AddItem" FontSize="12" Grid.Row="1" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" VerticalAlignment="Bottom" HorizontalAlignment="Right" Visibility="Hidden">✔</Button>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter TargetName="button_confirm" Property="Visibility" Value="Visible"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--定义带有 Placeholder 的 TextBox-->
        <Style x:Key="PlaceholderedTextBox" TargetType="TextBox">
            <Style.Resources>
                <ControlTemplate x:Key="placeholder" TargetType="TextBox">
                    <Label x:Name="placeholder_label" FontStyle="Italic" 
                           Content="{TemplateBinding DataContext}" 
                           HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                           Cursor="{TemplateBinding Cursor}"
                           Padding="{TemplateBinding Padding}" Margin="0"
                           Foreground="{DynamicResource PlaceholderForeground}" Background="{TemplateBinding Background}"
                           BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                    </Label>
                </ControlTemplate>
            </Style.Resources>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Cursor" Value="IBeam"/>
            <Setter Property="MaxLines" Value="1"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Text" Value=""/>
                        <Condition Property="IsFocused" Value="False"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource MenuBackground}"/>
                    <Setter Property="Template" Value="{DynamicResource placeholder}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Text" Value=""/>
                        <Condition Property="IsFocused" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Template" Value="{DynamicResource placeholder}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        
        <!--属性显示盒的样式-->
        <Style x:Key="CharacteristicBoxStyle" TargetType="cview:CharacteristicBox">
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Width" Value="144"/>
            <Setter Property="Height" Value="54"/>
        </Style>
        <!--合法性检查标签的样式-->
        <Style x:Key="ValidityCheck" TargetType="Label">
            <Setter Property="FontWeight" Value="ExtraBold"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Padding" Value="5,0,5,0"/>
            <Setter Property="Foreground" Value="WhiteSmoke"/>
        </Style>
        <!--数据表的样式-->
        <Style x:Key="DataGridStyle" TargetType="DataGrid">
            <Setter Property="ColumnHeaderStyle" Value="{DynamicResource ColumnHeaderStyle}"></Setter>
            <Setter Property="CellStyle" Value="{DynamicResource CellStyle}"></Setter>
            <Setter Property="RowStyle" Value="{DynamicResource RowStyle}"></Setter>
            <Setter Property="Background" Value="White"></Setter>
            <Setter Property="EnableRowVirtualization" Value="False"></Setter>
            <Setter Property="GridLinesVisibility" Value="None"></Setter>
            <Setter Property="CanUserAddRows" Value="False"></Setter>
            <!--禁止在尾行手动添加数据-->
            <Setter Property="AutoGenerateColumns" Value="False"></Setter>
            <Setter Property="IsEnabled" Value="True"></Setter>
        </Style>
        <!--表头的样式-->
        <Style x:Key="ColumnHeaderStyle" TargetType="DataGridColumnHeader">
            <Setter Property="Height" Value="35"></Setter>
            <Setter Property="Background" Value="#F2F2F2"></Setter>
            <Setter Property="BorderThickness" Value="1"></Setter>
            <Setter Property="BorderBrush" Value="#CBCBCB"></Setter>
            <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
            <!--水平居中-->
            <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
            <!--垂直居中-->
        </Style>
        <!--表行的样式-->
        <Style x:Key="RowStyle" TargetType="DataGridRow">
            <Setter Property="Cursor" Value="Hand"></Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Background" Value="#F2F2F2"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background"  Value="#CBCBCB" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--单元格的样式-->
        <Style x:Key="CellStyle" TargetType="DataGridCell">
            <Setter Property="Height" Value="35"></Setter>
            <Setter Property="FontSize" Value="13"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="DataGridCell">
                        <Border x:Name="Bg" Background="Transparent" BorderThickness="1" UseLayoutRounding="True" BorderBrush="#FFCBCBCB">
                            <ContentPresenter HorizontalAlignment="Center"  VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background"  Value="#CBCBCB" />
                    <Setter Property="Foreground" Value="#000000" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Application.Resources>
</Application>
